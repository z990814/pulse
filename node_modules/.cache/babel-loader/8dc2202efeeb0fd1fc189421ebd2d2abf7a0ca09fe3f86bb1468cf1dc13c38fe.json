{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\"; //引用axios\nimport router from \"../router/index\"; //如果是没有登录权限的，需要跳回登录页面\nimport Element from \"element-ui\"; //需要弹窗组件\n\n//这是调用数据接口\n// axios.defaults.baseURL = \"http://35.194.242.66:8092\"\n\n//创建对象\nconst request = axios.create({\n  timeout: 5000,\n  // 请求超时时间\n  headers: {\n    'Content-Type': \"application/json; charset=utf-8\" //我们返回的是一个json数据\n  },\n\n  // baseURL:'https://okr1-api.foxconnedu.com'//api的url\n  baseURL: 'http://localhost:9701' //api的url\n});\n\n// 添加请求拦截器\n// http request 拦截器（所有发送的请求都要从这儿过一次），通过这个，我们就可以把token传到后台，\nrequest.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  // 在请求头都带上jwt\n  config.headers['satoken'] = localStorage.getItem(\"pltoken\");\n  return config;\n});\n\n// 添加响应拦截器\n// http response 拦截器（所有接收到的请求都要从这儿过一次\nrequest.interceptors.response.use(response => {\n  console.log(\"response ->\" + response);\n  // 2xx 范围内的状态码都会触发该函数。\n  // 对响应数据做点什么\n  let res = response.data;\n  if (res.code === 200) {\n    return response;\n  } else if (res.code === 201) {\n    Element.Message.error(!res.msg ? '系统异常' : res.msg);\n    router.push(\"/login\");\n    return;\n  } else {\n    Element.Message.error(!res.msg ? '系统异常' : res.msg);\n    return Promise.reject(response.data.msg);\n  }\n},\n// 超出 2xx 范围的状态码都会触发该函数。\n// 对响应错误做点什么\nerror => {\n  if (!localStorage.getItem('pltoken')) {\n    Element.Message.error('系统异常,您可能尚未登录过');\n    router.push(\"/login\");\n    return;\n  }\n  console.log(error);\n  if (error.response.data) {\n    error.massage = error.response.data.msg;\n  }\n  //401代表权限不够\n  if (error.response.status === 401) {\n    router.push(\"/login\");\n  }\n  //错误弹窗\n  Element.Message.error(error.massage, {\n    duration: 3000\n  });\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","Element","request","create","timeout","headers","baseURL","interceptors","use","config","localStorage","getItem","response","console","log","res","data","code","Message","error","msg","push","Promise","reject","massage","status","duration"],"sources":["/Users/zoufangqin/Desktop/code/loading/pulse/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";//引用axios\nimport router from \"../router/index\";//如果是没有登录权限的，需要跳回登录页面\nimport Element from \"element-ui\";//需要弹窗组件\n\n//这是调用数据接口\n// axios.defaults.baseURL = \"http://35.194.242.66:8092\"\n\n\n\n//创建对象\nconst request = axios.create({\n\ttimeout: 5000,// 请求超时时间\n\theaders: {\n\t\t'Content-Type': \"application/json; charset=utf-8\"//我们返回的是一个json数据\n\t},\n\t// baseURL:'https://okr1-api.foxconnedu.com'//api的url\n\tbaseURL: 'http://localhost:9701' //api的url\n})\n\n// 添加请求拦截器\n// http request 拦截器（所有发送的请求都要从这儿过一次），通过这个，我们就可以把token传到后台，\nrequest.interceptors.request.use(\n\tconfig => {\n\t// 在发送请求之前做些什么\n  // 在请求头都带上jwt\n\t\tconfig.headers['satoken'] = localStorage.getItem(\"pltoken\")\n\t\treturn config\n}) \n\n// 添加响应拦截器\n// http response 拦截器（所有接收到的请求都要从这儿过一次\nrequest.interceptors.response.use(\n\tresponse => {\n\n\t\tconsole.log(\"response ->\" + response)\n\t\t// 2xx 范围内的状态码都会触发该函数。\n  \t// 对响应数据做点什么\n\t\tlet res = response.data\n\n\t\tif (res.code === 200) {\n\t\t\treturn response\n\t\t} else if(res.code === 201) {\n\t\t\tElement.Message.error(!res.msg ? '系统异常' : res.msg)\n\t\t\trouter.push(\"/login\")\n\t\t\treturn\n\t\t}\n\t\t else {\t\t\t\t\n\t\t\tElement.Message.error(!res.msg ? '系统异常' : res.msg)\n\t\t\treturn Promise.reject(response.data.msg)\n\t\t}\n\t},\n\t// 超出 2xx 范围的状态码都会触发该函数。\n  // 对响应错误做点什么\n\terror => {\n\n\t\tif(!localStorage.getItem('pltoken')) {\n\t\t\tElement.Message.error('系统异常,您可能尚未登录过')\n\t\t\trouter.push(\"/login\")\n\t\t\treturn\n\t\t}\n\t\tconsole.log(error)\n\n\t\tif (error.response.data) {\n\t\t\terror.massage = error.response.data.msg\n\t\t}\n    //401代表权限不够\n\t\tif (error.response.status === 401) {\n\t\t\trouter.push(\"/login\")\n\t\t}\n    //错误弹窗\n\t\tElement.Message.error(error.massage, {duration: 3000})\n\t\treturn Promise.reject(error)\n\t}\n)\n\nexport default request\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAOC,MAAM,MAAM,iBAAiB,CAAC;AACrC,OAAOC,OAAO,MAAM,YAAY,CAAC;;AAEjC;AACA;;AAIA;AACA,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC5BC,OAAO,EAAE,IAAI;EAAC;EACdC,OAAO,EAAE;IACR,cAAc,EAAE,iCAAiC;EAClD,CAAC;;EACD;EACAC,OAAO,EAAE,uBAAuB,CAAC;AAClC,CAAC,CAAC;;AAEF;AACA;AACAJ,OAAO,CAACK,YAAY,CAACL,OAAO,CAACM,GAAG,CAC/BC,MAAM,IAAI;EACV;EACC;EACAA,MAAM,CAACJ,OAAO,CAAC,SAAS,CAAC,GAAGK,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;EAC3D,OAAOF,MAAM;AACf,CAAC,CAAC;;AAEF;AACA;AACAP,OAAO,CAACK,YAAY,CAACK,QAAQ,CAACJ,GAAG,CAChCI,QAAQ,IAAI;EAEXC,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGF,QAAQ,CAAC;EACrC;EACC;EACD,IAAIG,GAAG,GAAGH,QAAQ,CAACI,IAAI;EAEvB,IAAID,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;IACrB,OAAOL,QAAQ;EAChB,CAAC,MAAM,IAAGG,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;IAC3BhB,OAAO,CAACiB,OAAO,CAACC,KAAK,CAAC,CAACJ,GAAG,CAACK,GAAG,GAAG,MAAM,GAAGL,GAAG,CAACK,GAAG,CAAC;IAClDpB,MAAM,CAACqB,IAAI,CAAC,QAAQ,CAAC;IACrB;EACD,CAAC,MACK;IACLpB,OAAO,CAACiB,OAAO,CAACC,KAAK,CAAC,CAACJ,GAAG,CAACK,GAAG,GAAG,MAAM,GAAGL,GAAG,CAACK,GAAG,CAAC;IAClD,OAAOE,OAAO,CAACC,MAAM,CAACX,QAAQ,CAACI,IAAI,CAACI,GAAG,CAAC;EACzC;AACD,CAAC;AACD;AACC;AACDD,KAAK,IAAI;EAER,IAAG,CAACT,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,EAAE;IACpCV,OAAO,CAACiB,OAAO,CAACC,KAAK,CAAC,eAAe,CAAC;IACtCnB,MAAM,CAACqB,IAAI,CAAC,QAAQ,CAAC;IACrB;EACD;EACAR,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;EAElB,IAAIA,KAAK,CAACP,QAAQ,CAACI,IAAI,EAAE;IACxBG,KAAK,CAACK,OAAO,GAAGL,KAAK,CAACP,QAAQ,CAACI,IAAI,CAACI,GAAG;EACxC;EACE;EACF,IAAID,KAAK,CAACP,QAAQ,CAACa,MAAM,KAAK,GAAG,EAAE;IAClCzB,MAAM,CAACqB,IAAI,CAAC,QAAQ,CAAC;EACtB;EACE;EACFpB,OAAO,CAACiB,OAAO,CAACC,KAAK,CAACA,KAAK,CAACK,OAAO,EAAE;IAACE,QAAQ,EAAE;EAAI,CAAC,CAAC;EACtD,OAAOJ,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC7B,CAAC,CACD;AAED,eAAejB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}